package com.ms.email.marketing.config;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.ms.email.marketing.model.BaseRequestModel;
import com.ms.email.marketing.service.RequestService;
import com.ms.email.marketing.utils.CommonUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import javax.servlet.*;
import javax.servlet.http.HttpServletRequest;
import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import java.util.stream.Collectors;

@Component
public class CustomRequestFilter implements Filter {

    @Value("${custom.filter.isSaveToDbEnabled:false}")
    private boolean isSaveToDbEnabled;
    @Autowired private CommonUtil commonUtil;
    @Autowired private RequestService requestService;
    private static final Logger LOG = LoggerFactory.getLogger(CustomRequestFilter.class);

    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain filterChain) throws IOException, ServletException, JsonProcessingException {
        LOG.info("doFilter =====================================================");
        HttpServletRequest req = (HttpServletRequest) request;
        String requestString = new StringBuilder()
                .append("==================== START---> ")
                .append(req.getMethod()).append(" ")
                .append(req.getRequestURI()).append(" ")
                .append("====================")
                .toString();
        LOG.info(requestString);
        if(isSaveToDbEnabled) {
            logRequestInfo(req);
        }
        filterChain.doFilter(request, response);
    }

    private void logRequestInfo(HttpServletRequest request) throws JsonProcessingException{
        LOG.info("Check getServerName: "+ request.getServerName());
        LOG.info("Check getContentType: "+ request.getContentType());
        LOG.info("Check getRemotePort: "+ request.getRemotePort());
        LOG.info("Check getAuthType: "+ request.getAuthType());
        LOG.info("Check getServerPort: "+ request.getServerPort());
        LOG.info("Check getLocale: "+ request.getLocale().toString());

        String userAgent = request.getHeader("User-Agent");
        LOG.info("userAgent: "+userAgent);

        BaseRequestModel baseReq = BaseRequestModel.builder()
                .protocol(request.getProtocol())
                .uri(request.getRequestURI())
                .url(request.getRequestURL().toString())
                .param(request.getQueryString())
                .method(request.getMethod())
                .dateTime(LocalDateTime.now())
                .build();
        mapRequestUrl(request, baseReq);
        LOG.info("isSaveToDbEnabled: {}", isSaveToDbEnabled);
        if(isSaveToDbEnabled) {
            baseReq = requestService.saveAndFlush(baseReq);
        }
        LOG.info("BaseRequestModel: {}", commonUtil.printPrettyJson(baseReq));
    }

    private void mapRequestUrl(HttpServletRequest request, BaseRequestModel baseRequestModel){
        final String remoteHost = request.getRemoteHost();// 0:0:0:0:0:0:0:1
        final String remoteAddr = request.getRemoteAddr();//0:0:0:0:0:0:0:1
        final String localName = request.getLocalName(); //0:0:0:0:0:0:0:1
        final String localAddr = request.getLocalAddr();//0:0:0:0:0:0:0:1
//        LOG.info("remoteHost: {}", remoteHost);
//        LOG.info("remoteAddr: {}", remoteAddr);
//        LOG.info("localName: {}", localName);
//        LOG.info("localAddr: {}", localAddr);

        List<String> ipList = Arrays.asList(remoteHost, remoteAddr,localName,localAddr)
                .stream()
                .filter(e -> null != e)
                .distinct().collect(Collectors.toList());

        baseRequestModel.setIp(ipList.get(0));

        if (ipList.size() > 1)
            baseRequestModel.setAlternativeIp(String.join(",", ipList.stream().skip(1).collect(Collectors.toList())));

    }
}
